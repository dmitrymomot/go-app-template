// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account_members.sql

package repository

import (
	"braces.dev/errtrace"
	"context"
	"database/sql"
)

const countAccountMembers = `-- name: CountAccountMembers :one
SELECT COUNT(user_id) as count
FROM account_members
WHERE account_id = ?
`

// CountAccountMembers: retrieves members number of an account
func (q *Queries) CountAccountMembers(ctx context.Context, accountID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAccountMembers, accountID)
	var count int64
	err := row.Scan(&count)
	return count, errtrace.Wrap(err)
}

const countUserAccounts = `-- name: CountUserAccounts :one
SELECT COUNT(account_id) as count
FROM account_members
WHERE user_id = ?
`

// CountUserAccounts: retrieves accounts number of a user
func (q *Queries) CountUserAccounts(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserAccounts, userID)
	var count int64
	err := row.Scan(&count)
	return count, errtrace.Wrap(err)
}

const createAccountMember = `-- name: CreateAccountMember :exec
INSERT INTO account_members (id, account_id, user_id, name, role, avatar_url) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateAccountMemberParams struct {
	ID        string
	AccountID string
	UserID    string
	Name      sql.NullString
	Role      sql.NullString
	AvatarUrl sql.NullString
}

// CreateAccountMember: creates a member for an account
func (q *Queries) CreateAccountMember(ctx context.Context, arg CreateAccountMemberParams) error {
	_, err := q.db.ExecContext(ctx, createAccountMember,
		arg.ID,
		arg.AccountID,
		arg.UserID,
		arg.Name,
		arg.Role,
		arg.AvatarUrl,
	)
	return errtrace.Wrap(err)
}

const deleteAccountMember = `-- name: DeleteAccountMember :exec
DELETE FROM account_members WHERE id = ?
`

// DeleteAccountMember: deletes a member of an account
func (q *Queries) DeleteAccountMember(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAccountMember, id)
	return errtrace.Wrap(err)
}

const deleteAccountMembersByAccountID = `-- name: DeleteAccountMembersByAccountID :exec
DELETE FROM account_members WHERE account_id = ?
`

// DeleteAccountMembersByAccountID: deletes all members of an account
func (q *Queries) DeleteAccountMembersByAccountID(ctx context.Context, accountID string) error {
	_, err := q.db.ExecContext(ctx, deleteAccountMembersByAccountID, accountID)
	return errtrace.Wrap(err)
}

const deleteAccountMembersByUserID = `-- name: DeleteAccountMembersByUserID :exec
DELETE FROM account_members WHERE user_id = ?
`

// DeleteAccountMembersByUserID: deletes all members across all accounts for a user
func (q *Queries) DeleteAccountMembersByUserID(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteAccountMembersByUserID, userID)
	return errtrace.Wrap(err)
}

const getAccountMemberByID = `-- name: GetAccountMemberByID :one
SELECT id, account_id, user_id, name, role, avatar_url, created_at FROM account_members WHERE id = ?
`

// GetAccountMember: retrieves a member of an account by its id
func (q *Queries) GetAccountMemberByID(ctx context.Context, id string) (AccountMember, error) {
	row := q.db.QueryRowContext(ctx, getAccountMemberByID, id)
	var i AccountMember
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.Name,
		&i.Role,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, errtrace.Wrap(err)
}

const getAccountMemberByUserID = `-- name: GetAccountMemberByUserID :one
SELECT id, account_id, user_id, name, role, avatar_url, created_at FROM account_members WHERE account_id = ? AND user_id = ?
`

type GetAccountMemberByUserIDParams struct {
	AccountID string
	UserID    string
}

// GetAccountMemberByUserID: retrieves a member of an account by its user_id
func (q *Queries) GetAccountMemberByUserID(ctx context.Context, arg GetAccountMemberByUserIDParams) (AccountMember, error) {
	row := q.db.QueryRowContext(ctx, getAccountMemberByUserID, arg.AccountID, arg.UserID)
	var i AccountMember
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.Name,
		&i.Role,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, errtrace.Wrap(err)
}

const getAccountMembers = `-- name: GetAccountMembers :many
SELECT id, account_id, user_id, name, role, avatar_url, created_at FROM account_members
WHERE account_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetAccountMembersParams struct {
	AccountID string
	Limit     int64
	Offset    int64
}

// GetAccountMembers: retrieves members list of an account with pagination
func (q *Queries) GetAccountMembers(ctx context.Context, arg GetAccountMembersParams) ([]AccountMember, error) {
	rows, err := q.db.QueryContext(ctx, getAccountMembers, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, errtrace.Wrap(err)
	}
	defer rows.Close()
	var items []AccountMember
	for rows.Next() {
		var i AccountMember
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.UserID,
			&i.Name,
			&i.Role,
			&i.AvatarUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, errtrace.Wrap(err)
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, errtrace.Wrap(err)
	}
	if err := rows.Err(); err != nil {
		return nil, errtrace.Wrap(err)
	}
	return items, nil
}

const updateAccountMember = `-- name: UpdateAccountMember :exec
UPDATE account_members SET name = ?, role = ?, avatar_url = ? WHERE id = ?
`

type UpdateAccountMemberParams struct {
	Name      sql.NullString
	Role      sql.NullString
	AvatarUrl sql.NullString
	ID        string
}

// UpdateAccountMember: updates a member of an account
func (q *Queries) UpdateAccountMember(ctx context.Context, arg UpdateAccountMemberParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountMember,
		arg.Name,
		arg.Role,
		arg.AvatarUrl,
		arg.ID,
	)
	return errtrace.Wrap(err)
}
