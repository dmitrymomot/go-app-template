// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: accounts.sql

package repository

import (
	"braces.dev/errtrace"
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (id, name, slug, logo_url) VALUES (?1, ?2, ?3, ?4)
`

type CreateAccountParams struct {
	ID      string
	Name    sql.NullString
	Slug    string
	LogoUrl sql.NullString
}

// CreateAccount: creates an account for a user
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.LogoUrl,
	)
	return errtrace.Wrap(err)
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = ?1
`

// DeleteAccount: deletes an account
func (q *Queries) DeleteAccount(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return errtrace.Wrap(err)
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, slug, logo_url, created_at FROM accounts WHERE id = ?1
`

// GetAccount: retrieves an account by its id
func (q *Queries) GetAccount(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.LogoUrl,
		&i.CreatedAt,
	)
	return i, errtrace.Wrap(err)
}

const getAccountBySlug = `-- name: GetAccountBySlug :one
SELECT id, name, slug, logo_url, created_at FROM accounts WHERE slug = ?1
`

// GetAccountBySlug: retrieves an account by its slug
func (q *Queries) GetAccountBySlug(ctx context.Context, slug string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountBySlug, slug)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.LogoUrl,
		&i.CreatedAt,
	)
	return i, errtrace.Wrap(err)
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE accounts SET name = ?1, slug = ?2, logo_url = ?3 WHERE id = ?4
`

type UpdateAccountParams struct {
	Name    sql.NullString
	Slug    string
	LogoUrl sql.NullString
	ID      string
}

// UpdateAccount: updates an account
func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateAccount,
		arg.Name,
		arg.Slug,
		arg.LogoUrl,
		arg.ID,
	)
	return errtrace.Wrap(err)
}
