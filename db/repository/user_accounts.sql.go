// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_accounts.sql

package repository

import (
	"braces.dev/errtrace"
	"context"
)

const getUserAccounts = `-- name: GetUserAccounts :many
SELECT accounts.id, accounts.name, accounts.title, accounts.logo_url, accounts.created_at, account_members.id, account_members.account_id, account_members.user_id, account_members.name, account_members.role, account_members.avatar_url, account_members.created_at
FROM account_members
JOIN accounts ON accounts.id = account_members.account_id
WHERE account_members.user_id = ?1
ORDER BY account_members.created_at DESC
LIMIT ?3 OFFSET ?2
`

type GetUserAccountsParams struct {
	UserID string
	Offset int64
	Limit  int64
}

type GetUserAccountsRow struct {
	Account       Account
	AccountMember AccountMember
}

// GetUserAccounts: retrieves accounts list of a user with pagination
func (q *Queries) GetUserAccounts(ctx context.Context, arg GetUserAccountsParams) ([]GetUserAccountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserAccounts, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, errtrace.Wrap(err)
	}
	defer rows.Close()
	var items []GetUserAccountsRow
	for rows.Next() {
		var i GetUserAccountsRow
		if err := rows.Scan(
			&i.Account.ID,
			&i.Account.Name,
			&i.Account.Title,
			&i.Account.LogoUrl,
			&i.Account.CreatedAt,
			&i.AccountMember.ID,
			&i.AccountMember.AccountID,
			&i.AccountMember.UserID,
			&i.AccountMember.Name,
			&i.AccountMember.Role,
			&i.AccountMember.AvatarUrl,
			&i.AccountMember.CreatedAt,
		); err != nil {
			return nil, errtrace.Wrap(err)
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, errtrace.Wrap(err)
	}
	if err := rows.Err(); err != nil {
		return nil, errtrace.Wrap(err)
	}
	return items, nil
}
