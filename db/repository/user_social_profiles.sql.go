// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_social_profiles.sql

package repository

import (
	"braces.dev/errtrace"
	"context"
)

const createUserSocialProfile = `-- name: CreateUserSocialProfile :exec
INSERT INTO user_social_profiles (user_id, social_id, social_name) VALUES (?1, ?2, ?3)
`

type CreateUserSocialProfileParams struct {
	UserID     string
	SocialID   string
	SocialName string
}

// CreateUserSocialProfile: Link a user to a social profile
func (q *Queries) CreateUserSocialProfile(ctx context.Context, arg CreateUserSocialProfileParams) error {
	_, err := q.db.ExecContext(ctx, createUserSocialProfile, arg.UserID, arg.SocialID, arg.SocialName)
	return errtrace.Wrap(err)
}

const deleteUserSocialProfileBySocialID = `-- name: DeleteUserSocialProfileBySocialID :exec
DELETE FROM user_social_profiles WHERE social_id = ?1 AND social_name = ?2
`

type DeleteUserSocialProfileBySocialIDParams struct {
	SocialID   string
	SocialName string
}

// DeleteUserSocialProfileBySocialID: Delete a user's social profile by social id and social name
func (q *Queries) DeleteUserSocialProfileBySocialID(ctx context.Context, arg DeleteUserSocialProfileBySocialIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserSocialProfileBySocialID, arg.SocialID, arg.SocialName)
	return errtrace.Wrap(err)
}

const deleteUserSocialProfilesByUserID = `-- name: DeleteUserSocialProfilesByUserID :exec
DELETE FROM user_social_profiles WHERE user_id = ?1
`

// DeleteUserSocialProfilesByUserID: Delete a user's social profiles by user id
func (q *Queries) DeleteUserSocialProfilesByUserID(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserSocialProfilesByUserID, userID)
	return errtrace.Wrap(err)
}

const getUserSocialProfileBySocialID = `-- name: GetUserSocialProfileBySocialID :one
SELECT user_id, social_id, social_name, created_at FROM user_social_profiles WHERE social_id = ?1 AND social_name = ?2
`

type GetUserSocialProfileBySocialIDParams struct {
	SocialID   string
	SocialName string
}

// GetUserSocialProfileBySocialID: Get a user's social profile by social id and social name
func (q *Queries) GetUserSocialProfileBySocialID(ctx context.Context, arg GetUserSocialProfileBySocialIDParams) (UserSocialProfile, error) {
	row := q.db.QueryRowContext(ctx, getUserSocialProfileBySocialID, arg.SocialID, arg.SocialName)
	var i UserSocialProfile
	err := row.Scan(
		&i.UserID,
		&i.SocialID,
		&i.SocialName,
		&i.CreatedAt,
	)
	return i, errtrace.Wrap(err)
}

const getUserSocialProfilesByUserID = `-- name: GetUserSocialProfilesByUserID :many
SELECT user_id, social_id, social_name, created_at FROM user_social_profiles WHERE user_id = ?1 ORDER BY created_at DESC
`

// GetUserSocialProfilesByUserID: Get a user's social profiles by user id
func (q *Queries) GetUserSocialProfilesByUserID(ctx context.Context, userID string) ([]UserSocialProfile, error) {
	rows, err := q.db.QueryContext(ctx, getUserSocialProfilesByUserID, userID)
	if err != nil {
		return nil, errtrace.Wrap(err)
	}
	defer rows.Close()
	var items []UserSocialProfile
	for rows.Next() {
		var i UserSocialProfile
		if err := rows.Scan(
			&i.UserID,
			&i.SocialID,
			&i.SocialName,
			&i.CreatedAt,
		); err != nil {
			return nil, errtrace.Wrap(err)
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, errtrace.Wrap(err)
	}
	if err := rows.Err(); err != nil {
		return nil, errtrace.Wrap(err)
	}
	return items, nil
}
