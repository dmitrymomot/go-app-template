// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package repository

import (
	"braces.dev/errtrace"
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, email, password, created_at) VALUES (?1, ?2, ?3, ?4)
`

type CreateUserParams struct {
	ID        string
	Email     string
	Password  sql.NullString
	CreatedAt time.Time
}

// CreateUser: Create a new user in the database
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
	)
	return errtrace.Wrap(err)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?1
`

// DeleteUser: Delete a user from the database
func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return errtrace.Wrap(err)
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, created_at, verified_at FROM users WHERE email = ?1
`

// GetUserByEmail: Get a user by email
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.VerifiedAt,
	)
	return i, errtrace.Wrap(err)
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password, created_at, verified_at FROM users WHERE id = ?1
`

// GetUserByID: Get a user by id
func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.VerifiedAt,
	)
	return i, errtrace.Wrap(err)
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, password, created_at, verified_at FROM users ORDER BY created_at DESC LIMIT ?2 OFFSET ?1
`

type GetUsersParams struct {
	Offset int64
	Limit  int64
}

// GetUsers: Get user list with pagination
func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, errtrace.Wrap(err)
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.VerifiedAt,
		); err != nil {
			return nil, errtrace.Wrap(err)
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, errtrace.Wrap(err)
	}
	if err := rows.Err(); err != nil {
		return nil, errtrace.Wrap(err)
	}
	return items, nil
}

const getUsersCount = `-- name: GetUsersCount :one
SELECT COUNT(id) FROM users
`

// GetUsersCount: Get total user count
func (q *Queries) GetUsersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUsersCount)
	var count int64
	err := row.Scan(&count)
	return count, errtrace.Wrap(err)
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users SET email = ?1, verified_at = NULL WHERE id = ?2
`

type UpdateUserEmailParams struct {
	Email string
	ID    string
}

// UpdateUserEmail: Update a user's email
func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail, arg.Email, arg.ID)
	return errtrace.Wrap(err)
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password = ?1 WHERE id = ?2
`

type UpdateUserPasswordParams struct {
	Password sql.NullString
	ID       string
}

// UpdateUserPassword: Update a user's password
func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.ID)
	return errtrace.Wrap(err)
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users SET verified_at = ?1 WHERE id = ?2
`

type VerifyUserParams struct {
	VerifiedAt sql.NullTime
	ID         string
}

// VerifyUser: Verify a user's email
func (q *Queries) VerifyUser(ctx context.Context, arg VerifyUserParams) error {
	_, err := q.db.ExecContext(ctx, verifyUser, arg.VerifiedAt, arg.ID)
	return errtrace.Wrap(err)
}
