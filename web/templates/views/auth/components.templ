package auth

type InputType string

// String returns the string representation of the InputType
func (i InputType) String() string {
	return string(i)
}

const (
	Text     InputType = "text"
	Email    InputType = "email"
	Password InputType = "password"
	Hidden   InputType = "hidden"
)

type Input struct {
	Type         InputType
	ID           string
	Name         string
	Label        string
	Placeholder  string
	Autocomplete string
	Required     bool
	ActionURL    string
	ActionLabel  string
	Value        string
	Errors       []string
}

// GetInputID returns the ID of the input
func (c Input) GetInputID() string {
	if c.ID != "" {
		return c.ID
	}
	return c.Name
}

// GetInputType returns the type of the input
func (c Input) GetInputType() string {
	if c.Type == "" {
		return Text.String()
	}
	return c.Type.String()
}

// GetActionURL returns the action URL of the input
func (c Input) GetActionURL() templ.SafeURL {
	if c.ActionURL != "" {
		return templ.URL(c.ActionURL)
	}
	return "#"
}

templ InputField(c Input) {
	if c.Type == Hidden {
		<input id={ c.GetInputID() } name={ c.Name } type={ c.GetInputType() } value={ c.Value } class="hidden"/>
	} else {
		<div>
			<div class="flex items-center justify-between">
				<label for={ c.GetInputID() } class="block text-sm font-medium leading-6 text-zinc-900 dark:text-zinc-100">{ c.Label }</label>
				if c.ActionLabel != "" {
					<div class="text-sm">
						<a href={ c.GetActionURL() } class="font-semibold text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300">{ c.ActionLabel }</a>
					</div>
				}
			</div>
			<div class="mt-2">
				<input id={ c.GetInputID() } name={ c.Name } type={ c.GetInputType() } autocomplete={ c.Autocomplete } required?={ c.Required } value={ c.Value } class="block w-full rounded-md border-0 py-1.5 text-zinc-900 dark:text-zinc-100 shadow-sm dark:shadow-zinc-950 ring-1 ring-inset ring-zinc-300 dark:ring-zinc-600 placeholder:text-zinc-400 dark:placeholder:text-zinc-500 focus:ring-2 focus:ring-inset focus:ring-indigo-600 dark:focus:ring-indigo-300 sm:text-sm sm:leading-6 dark:bg-zinc-800"/>
			</div>
			if len(c.Errors) > 0 {
				for _, err := range c.Errors {
					<p class="mt-2 text-sm text-red-600 dark:text-red-500" id={ c.Name + "-error" }>{ err }</p>
				}
			}
		</div>
	}
}

templ PrimaryButton(label string) {
	<div>
		<button type="submit" id="submit-btn" class="flex w-full justify-center rounded-md bg-indigo-600 dark:bg-indigo-500 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm dark:shadow-zinc-950 hover:bg-indigo-500 dark:hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 dark:focus-visible:outline-indigo-500 cursor-pointer">
			<span class="default-label">{ label }</span>
			<span class="loading-label hidden">Sending...</span>
		</button>
	</div>
}

templ Form(action string) {
	<form class="space-y-6" hx-post={ action } hx-swap="innerHTML" hx-indicator="#submit-btn">
		{ children... }
	</form>
}

type PopupType string

// String returns the string representation of the PopupType
func (p PopupType) String() string {
	return string(p)
}

const (
	PopupSuccess PopupType = "success"
	PopupError   PopupType = "error"
	PopupWarning PopupType = "warning"
	PopupInfo    PopupType = "info"
)

type PopupPayload struct {
	Type        PopupType
	Title       string
	Message     string
	ActionURL   string
	ActionLabel string
}

templ PopupNotification(p PopupPayload) {
	<div class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true">
		<div class="fixed inset-0 bg-zinc-500 dark:bg-zinc-700 bg-opacity-75 dark:bg-opacity-50 transition-opacity"></div>
		<div class="fixed inset-0 z-10 w-screen overflow-y-auto">
			<div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
				<div class="relative transform overflow-hidden rounded-lg bg-white dark:bg-zinc-900 px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-sm sm:p-6">
					<div>
						switch p.Type {
							case PopupSuccess:
								@PopupIconSuccess()
							case PopupError:
								@PopupIconError()
							case PopupWarning:
								@PopupIconWarning()
							case PopupInfo:
								@PopupIconInfo()
							default:
								@PopupIconInfo()
						}
						<div class="mt-3 text-center sm:mt-5">
							<h3 class="text-2xl font-semibold leading-6 text-zinc-900 dark:text-zinc-100" id="modal-title">{ p.Title }</h3>
							<div class="mt-2">
								<p class="text-sm text-zinc-500 dark:text-zinc-400">{ p.Message }</p>
							</div>
						</div>
					</div>
					if p.ActionLabel != "" && p.ActionURL != "" {
						<div class="mt-5 sm:mt-6">
							<a href={ templ.URL(p.ActionURL) } class="flex w-full justify-center rounded-md bg-indigo-600 dark:bg-indigo-500 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm dark:shadow-zinc-950 hover:bg-indigo-500 dark:hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 dark:focus-visible:outline-indigo-500 cursor-pointer">
								{ p.ActionLabel }
							</a>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
}

templ PopupIconSuccess() {
	<div class="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100 dark:bg-green-500">
		<svg class="h-6 w-6 text-green-600 dark:text-green-900" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
			<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5"></path>
		</svg>
	</div>
}

templ PopupIconError() {
	<div class="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-red-100 dark:bg-red-500">
		<svg class="h-6 w-6 text-red-600 dark:text-red-900" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
			<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
		</svg>
	</div>
}

templ PopupIconWarning() {
	<div class="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-yellow-100 dark:bg-yellow-500">
		<svg class="h-6 w-6 text-yellow-600 dark:text-yellow-900" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
			<path stroke-linecap="round" stroke-linejoin="round" d="M12 8v4m0 4v.01"></path>
		</svg>
	</div>
}

templ PopupIconInfo() {
	<div class="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-blue-100 dark:bg-blue-500">
		<svg class="h-6 w-6 text-blue-600 dark:text-blue-900" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
			<path stroke-linecap="round" stroke-linejoin="round" d="M12 8v4m0 4v.01"></path>
		</svg>
	</div>
}
